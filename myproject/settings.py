"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os  # Добавляем для развертывания проекта

# SECRET_KEY = 'django-insecure-@^o-*)x)jhy@xiw-)mztyzay3d7h+f&@#vo-buc9rebzs$!yzh'
SECRET_KEY = os.getenv('SECRET_KEY')  # Добавляем для развертывания проекта

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # True - режим отладки, False - режим для развертывания проекта
SESSION_COOKIE_SECURE = True  # Добавляем для развертывания проекта
CSRF_COOKIE_SECURE = True  # Добавляем для развертывания проекта

ALLOWED_HOSTS = [
    '192.168.0.101',  # IP адрес ПК для подключения по локальной сети
    '127.0.0.1',  #
    '2024djangoGB.pythonanywhere.com',  # Добавляем для развертывания проекта
]

INTERNAL_IPS = [
    '127.0.0.1',  # Для развертывания проекта
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',  # Добавляем сразу наше приложение, после его создания
    'myapp2',
    'myapp3',
    'myapp4',
    'myapp5',
    'myapp6',
    'debug_toolbar',  # Для развертывания проекта

]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Для развертывания проекта
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Создает шабол на уровне проекта
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        # Для работы с локальной БД
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',

        # Для работы с pythonanywhere-services.com
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '2024djangoGB$default',
        'USER': '2024djangoGB',
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': '2024djangoGB.mysql.pythonanywhere-services.com',
        'OPTIONS': {
            'init_command': "SET NAMES 'utf8mb4';SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static/'  # Для развертывания проекта

MEDIA_URL = '/media/'  # Для работы с изображениями
MEDIA_ROOT = BASE_DIR / 'media'  # Для работы с изображениями

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
     'version': 1,
     'disable_existing_loggers': False,
     'formatters': {
         'verbose': {
             'format': '{levelname} {asctime} {module} {process} {thread} {message}',
             'style': '{',
         },
         'simple': {
            'format': '%(levelname)s %(message)s'
         },
     },
     'handlers': {
         'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',  # добавлен параметр formatter
         },
         'file': {
             'class': 'logging.FileHandler',
             'filename': './log/django.log',  # './log/django.log' - путь для сохранения файла с логами.
             'formatter': 'verbose',  # добавлен параметр formatter
         },
     },
     'loggers': {
         'django': {
             'handlers': ['console', 'file'],
             'level': 'INFO',
         },
         'myapp': {
             'handlers': ['console', 'file'],
             'level': 'DEBUG',
             'propagate': True,
         },
     },
}
